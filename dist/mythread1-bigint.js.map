{"version":3,"sources":["mythread1-bigint.js"],"names":["importScripts","addEventListener","event","piwei","bigInt","abs","n","mul","m","multiply","div","divide","add","__proto__","cmp","compare","data","threadall","threadid","console","log","p","a","h","x","fu","t","i","len","plus","postMessage","toString"],"mappings":"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","file":"mythread1-bigint.js","sourceRoot":"..","sourcesContent":["(() => {\r\n  //使用bigint测试\r\n  importScripts(\r\n    \"https://cdn.staticfile.org/big-integer/1.6.43/BigInteger.min.js\"\r\n\r\n    // ()=>{\r\n    // console.log(\"加载完成\")}\r\n  );\r\n  //   console.log(bigInt)\r\n  // importScripts(\"./decimal.min.js\");\r\n  // nabs.cmp=(m)=> nabs.compareAbs(m);\r\n  /**\r\n   * \r\n   * https://github.com/peterolson/BigInteger.js\r\n   * \r\n   * BigInteger.js Build Status Coverage Status Monthly Downloads\r\nBigInteger.js is an arbitrary-length integer library for Javascript, allowing arithmetic operations on integers of unlimited size, notwithstanding memory and time limitations.\r\n\r\nUpdate (December 2, 2018): BigInt is being added as a native feature of JavaScript. This library now works as a polyfill: if the environment supports the native BigInt, this library acts as a thin wrapper over the native implementation.\r\n\r\nBigInteger.js构建状态覆盖状态每月下载\r\nBigInteger.js是Javascript的任意长度整数库，允许对无限大小的整数进行算术运算，尽管存在内存和时间限制。\r\n\r\n更新（2018年12月2日）：BigInt被添加为JavaScript的本机功能。 此库现在可用作polyfill：如果环境支持本机BigInt，则此库充当本机实现的瘦包装器。\r\n*/\r\n  // setTimeout(mycalc,0)\r\n  // function mycalc(){\r\n\r\n  addEventListener(\"message\", function(event) {\r\n    bigInt.abs = n => bigInt(n).abs();\r\n\r\n    bigInt.mul = (n, m) => bigInt(n).multiply(m);\r\n\r\n    bigInt.div = (n, m) => bigInt(n).divide(m);\r\n    bigInt.add = (n, m) => bigInt(n).add(m);\r\n    //MAX_INT\r\n    //9007199254740992\r\n    bigInt().__proto__.cmp = bigInt().__proto__.compare;\r\n    bigInt().__proto__.div = bigInt().__proto__.divide;\r\n    bigInt().__proto__.mul = bigInt().__proto__.multiply;\r\n\r\n    bigInt(\"90071992547409920\").__proto__.cmp = bigInt(\r\n      \"90071992547409920\"\r\n    ).__proto__.compare;\r\n    bigInt(\"90071992547409920\").__proto__.div = bigInt(\r\n      \"90071992547409920\"\r\n    ).__proto__.divide;\r\n    bigInt(\"90071992547409920\").__proto__.mul = bigInt(\r\n      \"90071992547409920\"\r\n    ).__proto__.multiply;\r\n    // bigInt.cmp=bigInt.prototype.cmp=(n)=>;\r\n    var piwei;\r\n    piwei = event.data[0];\r\n    // piwei /= 2;\r\n    var threadall = event.data[1];\r\n    var threadid = event.data[2];\r\n    // console.log(\r\n    //   \"副线程\" + (threadid + 1) + \"从主线程接收\" + \"event.data\\n\",\r\n    //   ...event.data\r\n    // );\r\n    console.log(\r\n        \"副线程\" + (threadid + 1) + \"从主线程接收\" + \"event.data\\n\")\r\n        console.log( ...event.data\r\n      );\r\n  \r\n    // Decimal.precision = piwei + 1;\r\n    var p = new bigInt(0);\r\n    var a = new bigInt(1);\r\n    // var h = 1;\r\n    var h = new bigInt(\"1e\" + piwei);\r\n    // console.log(\"h\",h.toString())\r\n    var x = new bigInt(0);\r\n    var fu = 1;\r\n    var t = new bigInt(1);\r\n    for (var i = 0, len = threadid; i < len; i++) {\r\n      fu = -1 * fu;\r\n      a = bigInt.mul(a, 1024);\r\n      x = x.plus(1);\r\n    }\r\n    while (bigInt.abs(t).cmp(new bigInt(0)) >= 0) {\r\n      // console.log(\"t\",t.toString())\r\n      // console.log(\"a\",a.toString())\r\n      // console.log(\"x\",x.toString())\r\n      // console.log(\"p\",p.toString())\r\n      /**除法小于零的结果直接变成0,所以分母要特别大才能精确除法 */\r\n      t = bigInt\r\n        .mul(1, fu)\r\n\r\n        .mul(\r\n          bigInt\r\n            .div(h.mul(-(2 ** 5)), bigInt.mul(4, x).plus(1))\r\n            .plus(bigInt.div(h.mul(-1), bigInt.mul(4, x).plus(3)))\r\n            .plus(bigInt.div(h.mul(2 ** 8), bigInt.mul(10, x).plus(1)))\r\n            .plus(bigInt.div(h.mul(-(2 ** 6)), bigInt.mul(10, x).plus(3)))\r\n            .plus(bigInt.div(h.mul(-(2 ** 2)), bigInt.mul(10, x).plus(5)))\r\n            .plus(bigInt.div(h.mul(-(2 ** 2)), bigInt.mul(10, x).plus(7)))\r\n            .plus(bigInt.div(h.mul(1), bigInt.mul(10, x).plus(9)))\r\n        )\r\n        .div(bigInt.mul(2 ** 6, a));\r\n\r\n      p = bigInt.add(p, t);\r\n      if (bigInt.abs(t).cmp(new bigInt(0)) <= 0) break;\r\n\r\n      for (var i = 0, len = threadall; i < len; i++) {\r\n        fu = -1 * fu;\r\n        a = bigInt.mul(a, 1024);\r\n        x = x.plus(1);\r\n      }\r\n    }\r\n    // console.log(\"t\", t.toString())\r\n    // console.log(\"p\", p.toString())\r\n    postMessage([p.toString(), \"\" + x.plus(1)]);\r\n  });\r\n  // }\r\n})();\r\n"]}